plugins {
    id 'com.android.library'
    id 'kotlin-android'
    alias(libs.plugins.com.google.devtools.ksp)
    alias(libs.plugins.com.vanniktech.maven.publish)
}

android {
    compileSdkVersion Integer.parseInt(libs.versions.android.compile.sdk.get())

    defaultConfig {
        minSdkVersion Integer.parseInt(libs.versions.android.min.sdk.get())
        targetSdkVersion Integer.parseInt(libs.versions.android.target.sdk.get())
        versionCode Integer.parseInt(libs.versions.library.version.code.get())
        versionName libs.versions.library.version.name.get()
        buildConfigField 'int', 'VERSION_CODE', libs.versions.library.version.code.get()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    testOptions.unitTests.includeAndroidResources = true

    sourceSets {
        test.assets.srcDirs += files("$projectDir/dbschemas".toString())
    }
}

dependencies {
    api(libs.com.squareup.okhttp3)
    implementation(libs.org.jetbrains.kotlin.stdlib)
    implementation(libs.org.jetbrains.kotlinx.coroutines.core)
    implementation(libs.org.jetbrains.kotlinx.coroutines.android)

    // Room
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.lifecycle.extensions)

    testImplementation(libs.junit)
    testImplementation(libs.org.robolectric)
    testImplementation(libs.androidx.arch.core.testing)
    testImplementation(libs.androidx.test.core)
    testImplementation(libs.org.jetbrains.kotlinx.coroutines.test)
    testImplementation(libs.io.mockk)

    testImplementation(libs.androidx.room.testing)
    testImplementation(libs.androidx.test.ext.junit)

    ksp(libs.androidx.room.compiler)
}

ksp {
    arg("room.schemaLocation", "$projectDir/dbschemas".toString())
}